{"version":3,"sources":["Components/StateSetterGetter/StateSetterGetter.jsx","Components/RadioButton/RadioButton.jsx","Components/CheckBoxButton/CheckBoxButton.jsx","Components/ListOfComponents/ListOfComponents.jsx","App.js","reportWebVitals.js","index.js"],"names":["StateSetterGetter","props","className","type","onChange","this","inputText","onClick","apply","copy","Component","RadioButton","id","value","changeStatus","ListButton","name","onBoxCheck","ListOfComponent","onChangeRadioStatus","event","radioStatus","target","onChangeCheckBoxStatus","checkboxStatus","checked","App","applyState","array","JSON","parse","radio","document","getElementById","radios","getElementsByClassName","i","length","checkbox","checkboxes","includes","copyState","input","querySelector","defaultValue","select","execCommand","clickedRadioButton","setState","clickedCheckBoxButton","state","push","index","indexOf","splice","onChangeInputText","tabIndex","aria-hidden","stringify","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5cb12d00.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './StateSetterGetter.css';\r\n\r\nexport default class StateSetterGetter extends Component {\r\n\r\n    render(props) {\r\n        return (\r\n            <div className=\"component\">\r\n                <input type=\"text\" onChange={this.props.inputText}/>\r\n                <button type=\"button\" onClick={this.props.apply} >Apply State</button>\r\n                <button type=\"button\" onClick={this.props.copy} >Copy State</button>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class RadioButton extends Component {\r\n    render(props) {\r\n        return (\r\n            <div>\r\n                <input type=\"radio\" \r\n                    id=\"A\" className=\"rad\" \r\n                    value=\"A\" \r\n                    onClick={this.props.changeStatus} \r\n                />\r\n                <label >A</label>\r\n                <br/>\r\n                <input type=\"radio\" \r\n                    id=\"B\" className=\"rad\" \r\n                    value=\"B\" \r\n                    onClick={this.props.changeStatus} \r\n                />\r\n                <label >B</label>\r\n                <br/>\r\n                <input type=\"radio\" \r\n                    id=\"C\" className=\"rad\" \r\n                    value=\"C\" \r\n                    onClick={this.props.changeStatus} \r\n                />\r\n                <label >C</label>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ListButton extends Component {\r\n\r\n    render(props) {\r\n        return (\r\n            <div>\r\n                <input type={this.props.type} \r\n                    value={this.props.name} \r\n                    onChange={this.props.onBoxCheck}\r\n                    id={this.props.name} \r\n                    className=\"chkbox\"\r\n                />\r\n                <label>{this.props.name}</label> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport RadioButton from '../RadioButton/RadioButton';\r\nimport CheckBoxButton from '../CheckBoxButton/CheckBoxButton';\r\n\r\nexport default class ListOfComponent extends Component {\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    onChangeRadioStatus = (event) => {\r\n        this.props.radioStatus(event.target.value);\r\n    }\r\n\r\n    onChangeCheckBoxStatus = (event) => {\r\n        this.props.checkboxStatus(event.target.value, event.target.checked)\r\n    }\r\n\r\n    render(props) {\r\n        return (\r\n            <div>\r\n                <RadioButton changeStatus={this.onChangeRadioStatus} />\r\n                <CheckBoxButton type=\"checkbox\" onBoxCheck={this.onChangeCheckBoxStatus} name=\"AA\"/>\r\n                <CheckBoxButton type=\"checkbox\" onBoxCheck={this.onChangeCheckBoxStatus} name=\"BB\"/>\r\n                <CheckBoxButton type=\"checkbox\" onBoxCheck={this.onChangeCheckBoxStatus} name=\"CC\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport './Components/StateSetterGetter/StateSetterGetter'\nimport StateSetterGetter from './Components/StateSetterGetter/StateSetterGetter';\nimport ListOfComponents from './Components/ListOfComponents/ListOfComponents';\n\nlet inputText = '';\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      radio: '',\n      checkbox: [],\n    };\n  }\n  applyState = () => {\n      if(inputText !== '') {\n        let array = JSON.parse(inputText);\n        if(array.radio !== '') {\n          let radio = document.getElementById(array.radio);\n          radio.checked = true;\n        } else {\n          let radios = document.getElementsByClassName(\"rad\")\n          for(let i=0; i<radios.length; i++) {\n            radios[i].checked = false;\n          }\n        }\n        if(array.checkbox !== []) {\n          let checkboxes = document.getElementsByClassName(\"chkbox\")\n          for(let i=0; i<checkboxes.length; i++) {\n            if( array.checkbox.includes(checkboxes[i].value) ) {\n              checkboxes[i].checked = true;\n            }\n          }\n        } else {\n          let checkboxes = document.getElementsByClassName(\"chkbox\")\n          for(let i=0; i<checkboxes.length; i++) {\n            checkboxes[i].checked = false;\n          }\n        }\n      }\n  }\n\n  copyState = () => {\n    let input = document.querySelector(\"input.copyfrom\");\n    input.value = input.defaultValue;\n    input.select(); \n    document.execCommand(\"copy\");\n  }\n\n  clickedRadioButton = (value) => {\n    this.setState({radio: value});\n  }\n\n  clickedCheckBoxButton = (value, checked) => {\n    let array = this.state.checkbox;\n    if(checked) {\n      array.push(value);\n    } else {\n      const index = array.indexOf(value);\n      if (index > -1) {\n        array.splice(index, 1);\n      }\n    }\n    this.setState({checkbox: array});\n  }\n\n  onChangeInputText = (event) => {\n    inputText = event.target.value;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <StateSetterGetter \n          apply={this.applyState} \n          copy={this.copyState} \n          inputText={this.onChangeInputText}\n        />\n        <ListOfComponents \n          radioStatus={this.clickedRadioButton} \n          checkboxStatus={this.clickedCheckBoxButton} \n        />\n        <input className='copyfrom' tabIndex='-1' aria-hidden='true' defaultValue={ JSON.stringify(this.state) } />\n      </div>\n    );\n  }\n\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}